#!/usr/bin/env python

import os
import shutil
import sys
from optparse import OptionParser, SUPPRESS_HELP
from os.path import isfile, join, isdir

import Utils.reference_data as ref
from Utils import logger
from Utils.bed_utils import verify_bed
from Utils.bam_utils import verify_bam
from Utils.file_utils import adjust_path, safe_mkdir, verify_file, remove_quotes, file_exists, which
from Utils.logger import critical, err, info, warn, debug, is_local
from Utils.proc_args import read_samples, find_bams, find_fastq_pairs, set_up_dirs
from Utils.sambamba import index_bam
from Utils import sambamba
from Utils.parallel import ParallelCfg, parallel_view

import targqc
import targqc.config as cfg
from targqc import Sample
from targqc.Target import Target
from targqc.summarize import summarize_targqc

options = [
    (['--test'], dict(
        dest='test',
        help='Quick test of correct installation.'
    )),
    (['--bed', '--capture', '--amplicons'], dict(
        dest='bed',
        help='BED file with regions to analyse. If not specified, CDS across full genome will be analysed',
    )),
    (['-o', '--output-dir'], dict(
        dest='output_dir',
        metavar='DIR',
        help='Output directory (or directory name in case of bcbio final dir)',
        default=os.getcwd(),
     )),
    (['-g', '--genome'], dict(
        dest='genome',
        help='Genome build (hg19 or hg38), used to pick genome annotation BED file if not specified',
    )),
    (['--bwa-prefix'], dict(
        dest='bwa_prefix',
        help='Path to BWA index prefix to align if input is FastQ',
     )),
    (['--padding'], dict(
        dest='padding',
        type='int',
        help='integer indicating the number of bases to extend each target region up and down-stream. '
             'Default is ' + str(cfg.padding),
        default=cfg.padding
     )),
    (['--downsample-pairs-num', '--downsample-to'], dict(
        dest='downsample_pairs_num',
        type='int',
        help='If input is FastQ, select N random read pairs from each input set. '
             'Default is ' + str(cfg.downsample_pairs_num) + '. To turn off (align all reads), set --downsample-pairs-num off',
        default=cfg.downsample_pairs_num,
     )),
    (['-t', '--nt', '--threads'], dict(
        dest='threads',
        type='int',
        help='Number of threads'
     )),
    (['--reuse'], dict(
        dest='reuse_intermediate',
        help='reuse intermediate non-empty files in the work dir from previous run',
        action='store_true',
        default=cfg.reuse_intermediate
     )),
    (['-s', '--scheduler'], dict(
        dest='scheduler',
        choices=["lsf", "sge", "torque", "slurm", "pbspro"],
        help="Scheduler to use for ipython parallel"
     )),
    (["-q", "--queue"], dict(
        dest='queue',
        help="Scheduler queue to run jobs on, for ipython parallel"
     )),
    (["-r", "--resources"], dict(
        dest='resources',
        help=("Cluster specific resources specifications. "
          "Can be specified multiple times.\n"
          "Supports SGE, Torque, LSF and SLURM "
          "parameters."),
        default=[],
        action="append")),

    ##############
    ## Extended: #
    (['--bam'], dict(dest='bam', help=SUPPRESS_HELP,)),  # help='path to the BAM file to analyse',)),
    (['-1'], dict(dest='l_fpath', help=SUPPRESS_HELP,)),  # help='fastq left reads, optional instead of BAM')),
    (['-2'], dict(dest='r_fpath', help=SUPPRESS_HELP,)),  # help='fastq right reads, optional instead of BAM')),
    (['--sample', '--name'], dict(dest='sample', help=SUPPRESS_HELP,)),  # help='Sample name (default is part of name of the first parameter prior to the first - or .',)),
    (['--fai'], dict(
        dest='fai',
        help=SUPPRESS_HELP,  # Path to FAI file - to sort BAM and BED files, and to get chromosome lengths for proper padding BED files; optional
     )),
    # (['--reannotate'], dict(
    #     dest='reannotate',
    #     help='re-annotate BED file with gene names',
    #     action='store_true',
    #     default=True)
    #  ),
    (['-e', '--extended'], dict(
        dest='extended',
        action='store_true',
        default=False,
        help=SUPPRESS_HELP,  # 'extended - flagged regions and missed variants',
     )),
    (['--no-dedup'], dict(
        dest='no_dedup',
        action='store_true',
        default=not cfg.dedup,
        help=SUPPRESS_HELP,
     )),
    (['--debug'], dict(
        dest='debug',
        action='store_true',
        default=cfg.is_debug,
        help=SUPPRESS_HELP,
     )),
    (['--work-dir'], dict(dest='work_dir', metavar='DIR', help=SUPPRESS_HELP)),
    (['--log-dir'], dict(dest='log_dir', metavar='DIR', help=SUPPRESS_HELP)),
    (['--project-name'], dict(dest='project_name', help=SUPPRESS_HELP)),
    (['--email'], dict(dest='email', help=SUPPRESS_HELP)),
]


def _prep_samples(fastqs_by_sample, bam_by_sample, output_dir, work_dir):
    samples = []
    for sname, (l, r) in fastqs_by_sample.items():
        s = Sample(sname, join(output_dir, sname), join(work_dir, sname))
        s.l_fpath = l
        s.r_fpath = r
        samples.append(s)
    for sname, bam_fpath in bam_by_sample.items():
        s = Sample(sname, join(output_dir, sname), join(work_dir, sname), bam=bam_fpath)
        samples.append(s)
    samples.sort(key=lambda _s: _s.key_to_sort())
    for s in samples:
        safe_mkdir(s.work_dir)
        safe_mkdir(s.dirpath)
    return samples


# def _prep_beds(prep_bed, work_dir, target_bed):
#     target = None
#
#     if prep_bed:
#         info()
#         debug('*' * 70)
#         info('Preparing input BED file: sort, clean, cut, annotate')
#         cfg.features_bed_fpath, target_bed, seq2c_bed = prepare_beds(
#             work_dir, cfg.fai_fpath, cfg.features_bed_fpath, target_bed, cfg.cds_bed_fpath, reuse=cfg.reuse_intermediate)
#
#         if target_bed:
#             target, cfg.features_bed_fpath = extract_gene_names_and_filter_exons(
#                 work_dir, target_bed, cfg.features_bed_fpath, reuse=cfg.reuse_intermediate)
#     else:
#         info('The BED file is ready, skipping preparing.')
#         if target_bed:
#             target, _, _ = extract_gene_names_and_filter_exons(
#                 work_dir, target_bed, cfg.features_bed_fpath, reuse=cfg.reuse_intermediate)
#     info('*' * 70)
#     return target


def main(args):
    parser = OptionParser(description='Target coverage evaluation tool.')
    parser.set_usage('Usage: %prog *.bam -o targqc_stats [--bed target.bed ...]')
    for args, kwargs in options:
        parser.add_option(*args, **kwargs)
    opts, args = parser.parse_args()

    output_dir, work_dir = set_up_dirs(targqc.targqc_name, opts.output_dir, opts.work_dir, opts.log_dir)
    debug(' '.join(sys.argv))
    debug()

    set_config(opts)
    bwa_prefix = adjust_path(opts.bwa_prefix)
    bam_by_sample, fastqs_by_sample, target_bed_fpath = get_inputs(opts, args)

    samples = _prep_samples(fastqs_by_sample, bam_by_sample, output_dir, work_dir)

    fai_fpath = opts.fai or ref.get_fai(cfg.genome)
    target = Target(work_dir, fai_fpath, cfg.reuse_intermediate, target_bed_fpath)

    info()
    targqc.start_targqc(work_dir, samples, target, bwa_prefix=bwa_prefix)

    info()
    info('*' * 70)
    info('Summarizing')
    summarize_targqc(cfg.parallel_cfg.threads, output_dir, work_dir, samples, bed_fpath=target_bed_fpath)

    # info()
    # info('Summarizing: running MultiQC')
    # cmd = 'multiqc ' + output_dir + ('' if cfg.reuse_intermediate else ' --force') + ' -v ' + ' '.join(s.dirpath for s in samples)
    # run(cmd)

    if not cfg.is_debug and work_dir and isdir(work_dir):
        shutil.rmtree(work_dir)


def set_config(opts):
    cfg.is_debug = logger.is_debug = opts.debug
    tag = ('targqc_' + opts.project_name) if opts.project_name else 'targqc'
    cfg.parallel_cfg = ParallelCfg(opts.scheduler, opts.queue, opts.resources, opts.threads, tag)
    cfg.reuse_intermediate = opts.reuse_intermediate
    if opts.downsample_pairs_num == 'off':
        cfg.downsample_pairs_num = None
    else:
        cfg.downsample_pairs_num = opts.downsample_pairs_num
    cfg.padding = opts.padding
    cfg.genome = opts.genome
    cfg.dedup = not opts.no_dedup


def get_inputs(opts, args):
    bam_by_sample = dict()
    fastqs_by_sample = dict()

    if opts.bam or opts.l_fpath:
        if opts.sample_name:
            sample_name = remove_quotes(opts.sample_name)
            if opts.bam:
                bam_by_sample[sample_name] = verify_bam(opts.bam, is_critical=True)
            elif opts.l_fpath:
                l_fpath = verify_bam(opts.l_fpath, is_critical=True)
                r_fpath = verify_bam(opts.l_fpath)
                fastqs_by_sample[sample_name] = l_fpath, r_fpath
        else:
            if opts.bam:
                bam_by_sample = find_bams(opts.bam)
            elif opts.l_fpath:
                fastqs_by_sample = find_fastq_pairs([opts.l_fpath, opts.r_fpath])
    else:
        fastqs_by_sample, bam_by_sample = read_samples(args)

    bed_fpath = None
    if opts.bed:
        bed_fpath = verify_bed(opts.bed, is_critical=True)

    return bam_by_sample, fastqs_by_sample, bed_fpath


if __name__ == '__main__':
    main(sys.argv[1:])


